package fr.benjamin.petit.devicemonitoring.model;

import fr.benjamin.petit.devicemonitoring.model.param.DeviceParameter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClient;

import java.time.Instant;
import java.util.Arrays;

import static org.springframework.http.MediaType.APPLICATION_JSON;

/**
 * Record of a Device represented by its name
 *
 * @param name The name of the specific device
 */
@Slf4j
public record Device(String name) {

    /**
     * Method used to send data through the network stack
     */
    public void sendData(String baseUrl) {

        log.debug("Start send data for device {}", this);
        Instant dateOfMeasure = Instant.now();
        DeviceParameter deviceParameter = DeviceParameter.builder()
                .name(this.name())
                .measure(this.generateMeasure(dateOfMeasure))
                .dateOfMeasure(dateOfMeasure)
                .build();

        final RestClient restClient = RestClient.create();
        ResponseEntity<Void> response = restClient.post()
                .uri(baseUrl + "/send")
                .contentType(APPLICATION_JSON)
                .body(deviceParameter)
                .retrieve()
                .toBodilessEntity();
        log.debug("Data send with a status code of : {}", response.getStatusCode());
    }

    /**
     * Method for generating the arbitrary data to be sent
     *
     * @param dateOfMeasure : The parameter used to calculate the measure
     * @return the value of the measure which is the sum of all the digits generated by the hashcode of the timestamp
     */
    private Integer generateMeasure(Instant dateOfMeasure) {
        log.debug("Generate measure for device {}", this);
        int hashcodeOfNow = dateOfMeasure.hashCode();
        String string = String.valueOf(hashcodeOfNow);

        return Arrays.stream(string.replace("-", "").split(""))
                .map(Integer::valueOf)
                .reduce(0, Integer::sum);
    }
}
